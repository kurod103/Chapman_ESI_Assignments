# -*- coding: utf-8 -*-
"""MultiPop GA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nM5_3SD5B9hBsJj3wb_nPR12QqmfwIlA
"""
import os 
dir_path = os.path.dirname(os.path.realpath(__file__))
os.chdir(dir_path)

import random
import csv
import copy

#random.seed(1)

with open('buyer_values.csv', newline='') as f:
    reader = csv.reader(f)
    buyer_demands_full = list(reader)
for b in range(len(buyer_demands_full)):
    buyer_demands_full[b] = list(map(float, buyer_demands_full[b]))
buyer_demands_divided_0=[random.sample(buyer_demands_full,1400) for i in range(3)]
buyer_demands_divided_NoGPO=[random.sample(buyer_demands_full,260) for i in range(3)]

buyer_demands_divided_3=[[[],[],[]] for i in range(4)]
buyer_demands_divided_2=[[[],[],[]] for i in range(4)] #The original copies of each buyer demands list
buyer_demands_divided_1=[[[],[],[]] for i in range(4)]
#!!!

global_offers_list=[]
global_gpos_list=[[],[],[],[]]
global_sellers_list=[[],[],[],[],[]]

high_buyer_demands=buyer_demands_full[4000:5000]

seller_commission=False
buyer_commission=False
buyer_flat_fee=True
fee=10

costs = [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]]
seller_product_list = [[1, 1, 1], [1, 1, 1], [1, 0, 0], [0, 1, 0], [0, 0, 1]]
quality_vector = [[2,1,2],[2,2,1],[2,0,0], [0,3,0],[0,0,3]]

n_gpos = 4 
n_products = 3
n_sellers = len(quality_vector)

clearing_time=50
pop_size=50
iterations=10
periods=20

"""Generate Sellers"""
def generate_seller_costs():
    for product in range(n_products):
      average_cost = random.randint(30, 80)
      cost_sd = random.randint(5,20)
      
      for seller in range(n_sellers):
        quality = quality_vector[seller][product]
        random_error = random.randint(-5,5)
        
        cost = average_cost + (quality==3)*cost_sd - (quality==1)*cost_sd + random_error
    
        if quality == 0:
          cost = 999
        
        costs[seller][product] = cost
    for n in range(n_sellers):
      if quality_vector[n].count(0) > 0:
        if costs[n][0]!=0:
            costs[n][0]-=10 #reduce the cost of specialized sellers by 10"""###Generate one Seller Strategy"""
generate_seller_costs()
costs=[[57, 48, 59], [59, 67, 62], [46, 999, 999], [989, 82, 999], [989, 999, 72]]


def generate_prices(seller_product_list, cost_vector):
  price_vector=[]
  for product in range(n_products):
    if seller_product_list[product] == 1: # i.e., the seller sells this product
      price = random.randint(cost_vector[product], 5*cost_vector[product]) 
      price_vector.append(price)
    else:
      price_vector.append(0)
  return price_vector

def generate_seller_strategy(seller, seller_product_list):  
 
  s_costs = costs[seller] # [0, 30, 0]
  s_prices = generate_prices(seller_product_list, s_costs)

  s_markdowns=[random.random() for i in range (4)]
  weights = random.choice([0,1,2,3])
  
  return [s_prices,s_markdowns,weights]

def generate_seller_population(seller, seller_product_list, pop_size):
    population=[]
    for i in range(pop_size):
        k = generate_seller_strategy(seller, seller_product_list)
        population.append(k)
    return population

#[[90, 82, 82], [0.71, 0.32, 0.36, 0.34], 3]

"""Generate GPOs"""

#[0.49, 0.9, ['1, 3', 16.69]]

def generate_gpo_strategy():
  commission = round(random.betavariate(2,2),2)
  rebate = round(random.betavariate(2,2),2)
  
  combination=[]
  for i in range(n_sellers):
      if random.randint(0,n_sellers)==0:
          combination.append(i)
  combination=[str(combination),0]

  return [commission, rebate, combination]

def generate_gpo_population(pop_size):
  population=[]
  for i in range(pop_size):
    k=generate_gpo_strategy()
    population.append(k)
  return population

"""##Genetic Algorithm"""

def generate_population(pop_size):
  population=[]
  for seller in range(n_sellers):
    seller_strategies.append(generate_seller_strategy(seller, seller_product_list[seller]))
    population.append(generate_seller_population(seller, seller_product_list[seller], pop_size))
  for gpo in range(n_gpos):
    gpo_strategies.append(generate_gpo_strategy())
    population.append(generate_gpo_population(pop_size))
  strategies=seller_strategies+gpo_strategies  
  return population, strategies

"""###Generate Markdown"""

def generate_markdown(seller_markdown,numcontracts):
  if seller_markdown<0: #a mark up
    seller_markdown=seller_markdown*(1+.6*(numcontracts-1))
    return seller_markdown
  seller_markdown=seller_markdown*(1-.6*(numcontracts-1))
  return seller_markdown

"""###Calculate GPO Prices"""

 #[[90, 82, 82], [0.71, 0.32, 0.36, 0.34], 3]

def expand_lists(list1,list2,item):
    for q in range(len(list1)):
        for i in range(len(list1[0])):
            list1[q][i].append(999)
            list2[q][i].append(-1)

def Offers_List(gpo_strategies,seller_strategies):
    product_market=[[[],[],[]],[[],[],[]],[[],[],[]]]
    seller_selected=[[[],[],[]],[[],[],[]],[[],[],[]]]

    for seller in range(len(seller_strategies)):#Compiles list of sellers and profits
      expand_lists(product_market,seller_selected,999)
      for item in range(len(seller_strategies[seller])):
        quality=quality_vector[seller][item]-1 #returns 2 quality number
        price=seller_strategies[seller][0][item] #returns 55 price number
        
        product_market[item][quality][seller]=price #price for the Buyers
        seller_selected[item][quality][seller]=seller #seller that will receive this profit
    for g in range(len(gpo_strategies)):
        expand_lists(product_market,seller_selected,999)
        GPO=gpo_strategies[g]
        GPO_sellers = [int(s) for s in GPO[2][0] if s.isdigit()]
        for i in range(len(GPO_sellers)):
            sellerno=GPO_sellers[i]
            markdown=generate_markdown(seller_strategies[sellerno][1][g],len(GPO_sellers))     
            commission=GPO[1]*buyer_commission
            templist=[(_*(1-markdown))*(1-GPO[0])*(1+commission)+fee*buyer_flat_fee for _ in seller_strategies[sellerno][0]] #list of prices a GPO can use  
              
            for item in range(len(quality_vector[sellerno])):
                quality=quality_vector[sellerno][item]-1 #to allow for easier selection of correct quality list
                
                if quality==-1: #if quality does not exist
                  continue
                if templist[item] < product_market[-1][item][quality] or product_market[-1][item][quality]==999:
                  product_market[item][quality][-1]=templist[item]
                  seller_selected[item][quality][-1]=sellerno
        if len(GPO_sellers)==0:
            for item in product_market:
                for quality in item:
                    quality[-1]=999
    return product_market, seller_selected

def ChangeOffers (strategy,player,product_market, seller_selected, seller_strategies):
    if player<5:
        for p in range(len(product_market)):
            for q in range(len(product_market[p])):
                product_market[p][q][player]=strategy[0][p]
                seller_selected[p][q][player]=player
        return product_market,seller_selected
    else:
        for i in product_market:
            for q in i:
                q[player]=999
        GPO_sellers = [int(s) for s in strategy[2][0] if s.isdigit()]
        for seller in GPO_sellers: #returns a number such as 1,2,4
            markdown=generate_markdown(seller_strategies[seller][1][player-5],len(GPO_sellers))
            commission=strategy[1]*buyer_commission
            
            templist=[(_*(1-markdown))*(1-strategy[0])*(1+commission)+fee*buyer_flat_fee for _ in seller_strategies[seller][0]]
            #templist is a set of prices [21.55, 32.15, 1.36]
            
            for item in range(len(templist)):
                item_quality=quality_vector[seller][item]-1
                existing_item=product_market[item][item_quality][player]

                if templist[item] < existing_item or existing_item==999:
                  product_market[item][item_quality][player]=templist[item]
                  seller_selected[item][item_quality][player]=seller
        if len(GPO_sellers)==0:
            for item in product_market:
                for quality in item:
                    quality[player]=999        
    return product_market,seller_selected

def FixOffers (product_market):
    for product in range(len(product_market)):
        for quality in range(len(product_market[0])):
            for seller in range(len(product_market[0][0][0:5])):
                if quality_vector[seller][product]-1!=quality:
                    product_market[product][quality][seller]=999              
    return product_market

"""###Find Maximum Buyer Values"""

Buyer_surplus=[]

def MaximizeValues (offerings,buyer_demand,gpos_contracted,bd0,bd3,item):
  global Buyer_surplus
  qualities=[]
  gpos_used=[]
  
  for buyer in buyer_demand:
      surplus=0
      qualities.append(-1)
      gpos_used.append(0)
      Buyer_surplus.append(0)

      for quality in range(len(buyer)):
          if offerings[quality][-1]!=999:
              demand=buyer[quality] #demand function for buyer
              supply=offerings[quality][-1]*.2
              if demand-supply>=surplus:
                  surplus=demand-(offerings[quality][-1]*.2) #REIMBURSEMENT FROM GOVERNMENT
                  Buyer_surplus[-1]=surplus
                  qualities[-1]=quality
                  if gpos_contracted[quality]>=0: #a list of GPOs assigned to these qualities
                     gpos_used[-1]=gpos_contracted[quality]
      if gpos_used[-1]>0: 
          bd3[gpos_used[-1]-5][item].append(buyer)
          bd0[item].pop(bd0[item].index(buyer))
  return qualities,gpos_used,bd0,bd3

def MaximizeValues_NoGPO (offerings,buyer_demand):
  global Buyer_surplus
  qualities=[]
  for buyer in buyer_demand:
      Buyer_surplus.append(0)
      surplus=0
      qualities.append(-1)
      for quality in range(len(buyer)):
          demand=buyer[quality] #demand function for buyer
          supply=offerings[quality][-1]*.2

          if demand-supply>surplus:
              surplus=demand-(offerings[quality][-1]*.2) #REIMBURSEMENT FROM GOVERNMENT
              Buyer_surplus[-1]=surplus
              qualities[-1]=quality

  return qualities

"""###Fitness Functions"""

#offerings= [[[],[],[]],[[],[],[]],[[],[],[]]] s.t. offerings[item] determines item type
#offerings[item][quality] determines the quality nested within the item type list
#offerings[item][quality][seller] determines the seller # within the list of item>quality

#demands divided =[[[],[],[]],[[],[],[]],[[],[],[]],[[],[],[]]] s.t. demands[GPO] determines GPO affiliation
#demands[GPO][item] determines which item a buyer is seeking
threshhold=1.25 #at which point a buyer will switch from their affiliation


def return_demands(dem1,dem2,gpo_profits,offerings,strategies): #changes temporary lists of demands    
    profits=[[]]*4
    dem3=copy.deepcopy(dem2)
    for GPO_buyer in range(len(dem2)): #first sort by GPO [[items],[],[],[]]
        for item in range(len(dem2[GPO_buyer])): #then sort by item purchased [[n buyers],[],[]]
            for buyer in range(len(dem2[GPO_buyer][item])): #[a,b,c] quality demand
                profits[GPO_buyer].append(0)
                best_surplus=0
                
                for q in range(3): #check all three qualities for the optimal
                    demand=dem2[GPO_buyer][item][buyer][q]

                    best_surplus=(demand-offerings[item][q][-1])*.2/(threshhold) #will it deviate from the affiliation?
                    
                    price=offerings[item][q][GPO_buyer+5]*.2
                    rebate=strategies[GPO_buyer+5][1]*price
                    price=price-rebate
                    if demand-price>max(best_surplus,0):
                        best_surplus=demand-price
                        profits[GPO_buyer][-1]=price*strategies[GPO_buyer+5][0]-rebate
                if profits[GPO_buyer][-1]==0:
                    dem1[item].append(dem2[GPO_buyer][item][buyer])
                    inverse_buyer=dem3[GPO_buyer][item].index(dem2[GPO_buyer][item][buyer]) #prevent the iterations from messing with the pop
                    dem3[GPO_buyer][item].pop(inverse_buyer)
            gpo_profits[GPO_buyer]+=(sum(profits[GPO_buyer]))
    return gpo_profits, dem1, dem3

def fitness(strategy, player, strategies, offerings, sellers_contracted): #strategies being a list of optimals
  bd0=copy.deepcopy(buyer_demands_divided_0)
  bd1=copy.deepcopy(buyer_demands_divided_1)
  bd2=copy.deepcopy(buyer_demands_divided_2)
  bd3=[[[],[],[]] for i in range(4)]

  mod_offerings=copy.deepcopy(offerings)
  mod_sellers_contracted=copy.deepcopy(sellers_contracted)  

  strategies[player]=strategy #strategies[0]=strategy
  
  seller_strategies=strategies[0:5]
  strategytype=str([strategies,strategy,player])
  gpo_strategies=strategies[5:9]
  if player>=5: #If the GPO has no sellers, no reason to calculate this
      if '[]' in strategy[2][0]:
          return -1
 
  if strategytype in strategies_lookup: #If strategy has been attempted before, return result
      return strategies_lookup[strategytype]

  if player>=5: mod_offerings=FixOffers(mod_offerings)
  mod_offerings,mod_sellers_contracted = ChangeOffers(strategy, player, mod_offerings, mod_sellers_contracted, seller_strategies)
  mod_offerings_NoGPO=[[[],[],[]],[[],[],[]],[[],[],[]]]
  if player<5: mod_offerings=FixOffers(mod_offerings)
  #generate a marketplace from all sellers
  gpos_contracted=[]
  for item in range(len(mod_offerings)): #Take min prices, sellers from every list
      gpos_contracted.append([])
      for quality in range(len(mod_offerings[item])):
          item_list=mod_offerings[item][quality]
          seller_list=mod_sellers_contracted[item][quality]

          gpos_contracted[-1].append(item_list.index(min(item_list))-5)
          mod_sellers_contracted[item][quality].append(seller_list[item_list.index(min(item_list))])
          mod_offerings[item][quality].append(min(item_list))
          mod_offerings_NoGPO[item][quality].append(min(item_list[0:5]))
  seller_profit=[0]*5
  gpo_profit=[0]*4  
  
  gpo_profit,bd0,bd2=return_demands(bd0,bd2,gpo_profit,mod_offerings,strategies)
  gpo_profit,bd0,bd1=return_demands(bd0,bd1,gpo_profit,mod_offerings,strategies)
  global Buyer_surplus
  Buyer_surplus=[]
  for item in range(3):
      
      qualities,gpos_used,bd0,bd3 = MaximizeValues(mod_offerings[item],buyer_demands_divided_0[item],gpos_contracted[item],bd0,bd3,item)
      for q in qualities:
          if q>=0:
              sellno=mod_sellers_contracted[item][q][-1]#returns a seller (i.e., 3)
              gponum=gpos_used[q]
              price=seller_strategies[sellno][0][item]
              cost=costs[sellno][item]
    
              markdown=0
              commission=0
              if gponum>=0:
                  if seller_commission or buyer_commission: commission=gpo_strategies[gponum][0]*price
                  if buyer_flat_fee: commission=fee
                  markdown=seller_strategies[sellno][1][gponum]
                  gpo_profit[gponum]+=commission
              seller_profit[sellno]+=price-cost-commission*seller_commission-markdown
      qualities = MaximizeValues_NoGPO(mod_offerings_NoGPO[item],buyer_demands_divided_NoGPO[item])
      for q in qualities:
          if q>=0:
              sellno=mod_sellers_contracted[item][q][-1]#returns a seller (i.e., 3)
              price=seller_strategies[sellno][0][item]
              cost=costs[sellno][item]
              markdown=0
              commission=0
              seller_profit[sellno]+=price-cost-commission*seller_commission-markdown
          
  profit=seller_profit+gpo_profit
  if profit[player]>highscores[player]:
    if all((x>=0 for x in profit)) and sum(highscores)<=sum(profit):
      print(sum(Buyer_surplus))
      optimal_strategies[player]=copy.deepcopy(strategy)
      global_offers_list.append(mod_offerings)
      for i in range(len(profit)):
        highscores[i]=profit[i]
      global Surplus
      Surplus=sum(profit)
      global buyer_demands_optimal
      buyer_demands_optimal=[bd0,bd1,bd2,bd3]
  strategies_lookup[strategytype]=profit[player]
  return profit[player]

"""###Reproduction"""


def rotate_demands(bd0,bd1,bd2,bd3):
    for GPO in bd1:
        for item in range(len(GPO)):
            bd0[item]+=GPO[item]
    return bd0,bd2,bd3

def reproduce(total_population, next_population_size,player,Offerings,sellers_contracted):
    next_population=[]
    for _ in range(next_population_size):
        s1, s2 = random.sample(total_population, 2)
        if fitness(s1,player,optimal_strategies,Offerings,sellers_contracted)> fitness(s2,player,optimal_strategies,Offerings,sellers_contracted):
            next_population.append(s1)
        else:
            next_population.append(s2)      
    return next_population

"""###Crossover"""

def Sellercrossover(parent1, parent2):
  parent=[parent1[:],parent2[:]] #Need the [:] otherwise input variables are changed by this function
  children=list(parent)
  rand_idx = random.randint(0, len(parent1[0])+len(parent1[1]) - 1)
  for i in range(len(children)):
    if rand_idx>len(parent1[0]):
      children[i][1]=parent[i][1][0:(rand_idx-len(parent[i][0]))]+parent[i-1][1][(rand_idx-len(parent[i][0])):len(parent2[1])]
    else:
      children[i][0]=parent[i][0][0:rand_idx]+parent[i-1][0][rand_idx:len(parent2[0])]
  return children[0],children[1]

def GPOcrossover(parent1, parent2):
  rand_idx = random.randint(0, len(parent1) - 1)
  c1 = parent1[0:rand_idx] + parent2[rand_idx:len(parent2)]
  c2 = parent2[0:rand_idx] + parent1[rand_idx:len(parent2)]
    
  return c1,c2

"""###Mutation"""


def mutateseller(strategy):        
    mutated_strategy=copy.deepcopy(strategy)
    prob_mutate = 0.5
    if random.random() < prob_mutate:
        x=random.randint(0,2)
        if x==2:
          mutated_strategy[2]=random.randint(0,3)
          return mutated_strategy
        cell=random.randint(0,len(strategy[x])-1)
        if x==1: item=random.random()*random.choice((-1, 1))
        if x==0: item=random.randint(0,300)
        mutated_strategy[x][cell]=item
    return mutated_strategy


def mutateGPO(strategy):        
    mutated_strategy=copy.deepcopy(strategy)
    prob_mutate = 0.5
    if random.random() < prob_mutate:
        x=random.randint(0,2)
        if x<=1:
          mutated_strategy[x]=random.random()
          return mutated_strategy
        if x==3:
          mutated_strategy[2][1]=random.random()
          return mutated_strategy
        combination=[]
        for i in range(n_sellers):
          if random.randint(0,n_sellers)==0:
            combination.append(i)
        mutated_strategy[2][0]=str(combination)             
    return mutated_strategy


"""##Running the GA"""

maxtime=0

global Surplus

for p in range(periods):
    Best_surplus=0
    Best_buyer_demands=[]
    Best_strategies=[]
    Best_profits=[]
    for i in range(iterations):
        strategies_lookup=dict()
        seller_strategies = []
        gpo_strategies = []
        
        population,optimal_strategies=generate_population(100)
        buyer_demands_optimal=[]
        highscores=[0]*9
        Surplus=0
        k=1
        timer=0
        while k>0 or timer<maxtime:
           timer+=1
           for playerno in range(len(optimal_strategies)):
            Offerings,sellers_contracted= Offers_List(optimal_strategies[5:9],optimal_strategies[0:5])
            population[playerno]=reproduce(population[playerno],pop_size,playerno, Offerings, sellers_contracted)
            if playerno<5:
              for j in range(len(population[playerno])):
                if j//2==0:
                  population[playerno][j],population[playerno][j+1]=Sellercrossover(population[playerno][j],population[playerno][j+1])
                population[playerno][j]=mutateseller(population[playerno][j])
            else:
              for j in range(len(population[playerno])):
                if j//2==0:
                  population[playerno][j],population[playerno][j+1]=GPOcrossover(population[playerno][j],population[playerno][j+1])
                population[playerno][j]=mutateGPO(population[playerno][j])
           #if k%10==0: print(timer,[round(num, 1) for num in highscores])   
           k+=1
           if Surplus> 0:
               if Surplus>Best_surplus:
                   #print([round(num, 1) for num in highscores])
                   Best_strategies=copy.deepcopy(optimal_strategies)
                   Best_profits=copy.deepcopy(highscores)
                   Best_surplus=Surplus
                   Best_buyer_demands=copy.deepcopy(buyer_demands_optimal)
               k=0
    
    buyer_demands_divided_0,buyer_demands_divided_1,buyer_demands_divided_2=rotate_demands(*Best_buyer_demands)

    #print("PERIOD", p)
    #print()
    offers,sellers_contracted=Offers_List(Best_strategies[5:9],Best_strategies[0:5])
    #print("Surplus of:", Best_surplus)
    for i in range(len(Best_strategies)):
      
        #print(fitness(optimal_strategies[i],i,optimal_strategies,offers,sellers_contracted))
        if i>=5:
            global_gpos_list[i-5].append(Best_strategies[i])
        else:
            global_sellers_list[i].append(Best_strategies[i])
"""
for i in global_offers_list:
    print(i)
for i in global_sellers_list:
    print(i)
for i in global_gpos_list:
    print(i)
"""

